#!/usr/bin/env node

/**
 * Script de inicializa√ß√£o para corrigir permiss√µes dos diret√≥rios de upload
 * Executa automaticamente quando a aplica√ß√£o inicia
 */

const fs = require('fs');
const path = require('path');

// Diret√≥rios que precisam de permiss√µes de escrita
const uploadDirs = [
  '/app/public/uploads',
  '/app/public/uploads/imoveis',
  '/app/public/uploads/corretores',
  '/app/public/uploads/imoveis/videos'
];

console.log('üîß Verificando permiss√µes de upload...');

// Fun√ß√£o para criar diret√≥rio se n√£o existir
function ensureDir(dirPath) {
  try {
    if (!fs.existsSync(dirPath)) {
      fs.mkdirSync(dirPath, { recursive: true, mode: 0o777 });
      console.log(`‚úÖ Diret√≥rio criado: ${dirPath}`);
    }
  } catch (error) {
    console.error(`‚ùå Erro ao criar diret√≥rio ${dirPath}:`, error.message);
  }
}

// Fun√ß√£o para testar escrita
function testWrite(dirPath) {
  const testFile = path.join(dirPath, 'test_write.tmp');
  try {
    fs.writeFileSync(testFile, 'test');
    fs.unlinkSync(testFile);
    console.log(`‚úÖ Teste de escrita bem-sucedido: ${dirPath}`);
    return true;
  } catch (error) {
    console.log(`‚ùå Falha no teste de escrita em ${dirPath}: ${error.message}`);
    return false;
  }
}

// Fun√ß√£o para obter informa√ß√µes do diret√≥rio
function getDirInfo(dirPath) {
  try {
    if (fs.existsSync(dirPath)) {
      const stats = fs.statSync(dirPath);
      const mode = (stats.mode & parseInt('777', 8)).toString(8);
      return mode;
    } else {
      return 'n√£o existe';
    }
  } catch (error) {
    return 'erro';
  }
}

// Executar verifica√ß√µes
async function initPermissions() {
  let allTestsPassed = true;

  for (const dir of uploadDirs) {
    ensureDir(dir);
    
    const testResult = testWrite(dir);
    if (!testResult) {
      allTestsPassed = false;
    }
  }

  console.log('\n=== RESULTADO FINAL ===');
  if (allTestsPassed) {
    console.log('‚úÖ Todas as permiss√µes est√£o corretas!');
  } else {
    console.log('‚ö†Ô∏è Algumas permiss√µes podem n√£o estar corretas.');
    console.log('\nüìã Comandos manuais para executar como root:');
    console.log('chmod -R 777 /app/public/uploads');
    console.log('chown -R nextjs:nodejs /app/public/uploads');
  }

  console.log('\nüìä Status dos diret√≥rios:');
  for (const dir of uploadDirs) {
    const info = getDirInfo(dir);
    console.log(`üìÅ ${dir}: ${info}`);
  }

  console.log('\nüîß Verifica√ß√£o finalizada.\n');

  // Se houver problemas, tentar uma √∫ltima corre√ß√£o
  if (!allTestsPassed) {
    console.log('üîÑ Tentando corre√ß√£o final...');
    try {
      for (const dir of uploadDirs) {
        if (fs.existsSync(dir)) {
          fs.chmodSync(dir, 0o777);
        }
      }
      console.log('‚úÖ Corre√ß√£o final aplicada.');
    } catch (error) {
      console.log('‚ö†Ô∏è Corre√ß√£o final falhou:', error.message);
    }
  }
}

// Executar apenas se chamado diretamente
if (require.main === module) {
  initPermissions().catch(error => {
    console.error('‚ùå Erro durante inicializa√ß√£o:', error);
    process.exit(1);
  });
}

module.exports = { initPermissions };